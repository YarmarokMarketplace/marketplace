{
  "openapi": "3.0.3",
  "info": {
    "title": "Marketplace YarmarOK 1.0.0",
    "description": "Web platform where vendors can come together to sell their products or services to customers.\n\nThis is Marketplace YarmarOK Server based on the OpenAPI 3.0 specification\n\nSome useful links:\n- [The YarmarokMarketplace repository](https://github.com/YarmarokMarketplace/marketplace)",
    "contact": {
      "name": "API developers",
      "email": "yarmarokmarketplace@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8081/api",
      "description": "Development Server"
    },
    {
      "url": "https://yarmarok.onrender.com/api",
      "description": "Production Server"
    }
  ],
  "consumes": [
    "application/json",
    "multipart/form-data",
    "text/html"
  ],
  "produces": [
    "application/json",
    "multipart/form-data",
    "text/html"
  ],
  "tags": [
    {
      "name": "Notices",
      "description": "Notices endpoints"
    },
    {
      "name": "Categories",
      "description": "Categories endpoints"
    },
    {
      "name": "Authorization",
      "description": "User Authorization endpoints"
    }
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "summary": "Add new user",
        "tags": [
          "Authorization"
        ],
        "description": "Add new user to the Database",
        "operationId": "signup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Email already in use"
          },
          "429": {
            "description": "Looks like you are a bot, please try again in 24 hours"
          }
        }
      }
    },
    "/auth/verify/{verificationToken}": {
      "get": {
        "summary": "Verify user",
        "tags": [
          "Authorization"
        ],
        "description": "Verify user email",
        "operationId": "verifyEmail",
        "parameters": [
          {
            "name": "verificationToken",
            "in": "params",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Backend-generated unique verificationToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/html": {
                "schema": {
                  "example": "Ваша електронна пошта підтверджена! Перехід на головну через 5 секунд...",
                  "description": "returns HTML page with automated redirecting to the Homepage after 5 second"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "summary": "Resend the verification email",
        "tags": [
          "Authorization"
        ],
        "description": "Resend the verification email if the previous letter was not gotten",
        "operationId": "resendVerifyEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendVerifyEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "String",
                  "example": "Verification email is sent"
                }
              }
            }
          },
          "400": {
            "description": "Verification has already been passed"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login user",
        "tags": [
          "Authorization"
        ],
        "description": "Logs user into the system",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Not authorized"
          },
          "404": {
            "description": "User not found"
          },
          "429": {
            "description": "Too many requests, please try again in 24 hours"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh access and refresh tokens",
        "tags": [
          "Authorization"
        ],
        "description": "Create the new pair of acces and refresh tokens and write them into the DB",
        "operationId": "refresh",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Access token is invalid"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout user",
        "tags": [
          "Authorization"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Logs out current logged in user session",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Logout success"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "summary": "Get current user",
        "security": [{ "Bearer": [] }],
        "tags": [
          "Authorization"
        ],
        "description": "Refresh auth information of authorized user",
        "operationId": "getCurrent",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "summary": "Permit user to authorize via Google account",
        "tags": [
          "Authorization"
        ],
        "description": "Redirect user to the main page after google authorization",
        "operationId": "googleAuth",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "text/html": {
                "schema": {
                  "description": "returns HTML page with automated redirecting to the Homepage after google auth"
                }
              }
            }
          }
        }
      }
    },
    "/notices": {
      "get": {
        "summary": "Get all notices",
        "tags": [
          "Notices"
        ],
        "description": "Find all existing notices",
        "operationId": "getAllNotices",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Page number for pagination",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Number of articles per page.",
              "default": 9
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfNoticesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "There any notices for this user"
          }
        }
      },
      "post": {
        "summary": "Add new notice",
        "tags": [
          "Notices"
        ],
        "description": "Add new notice",
        "operationId": "addNotice",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddNoticeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNoticeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Email already in use"
          }
        }
      }
    },
    "/notices/{category}": {
      "get": {
        "summary": "Get notices by choosen category",
        "tags": [
          "Notices"
        ],
        "description": "Find and show all existing notices by choosen category",
        "operationId": "getNoticesByCategory",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "example": "auto",
            "schema": {
              "type": "string",
              "description": "Category for search"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Page number for pagination",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Number of articles per page.",
              "default": 9
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Type of sorting.",
              "enum": [
                "newest",
                "oldest",
                "cheapest",
                "expensive"
              ],
              "default": "newest"
            }
          },
          {
            "name": "goodtype",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Type of filtering.",
              "enum": [
                "new",
                "used"
              ]
            }
          },
          {
            "name": "priceRange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Type of filtering.",
              "example": "100-199"
            }
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Type of filtering.",
              "example": "Kyiv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfNoticesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Any notices for the given category"
          }
        }
      }
    },
    "/notices/{id}": {
      "patch": {
        "summary": "Update notice info",
        "tags": [
          "Notices"
        ],
        "description": "Update notice information in the database",
        "operationId": "updateNotice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "example": "6490564f8f85c705511c5de2",
            "schema": {
              "type": "string",
              "description": "Backend-generated unique identifier"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNoticeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNoticeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Notice not found"
          }
        }
      }
    },
    "/notices/notice/{id}": {
      "delete": {
        "tags": [
          "Notices"
        ],
        "summary": "Delete the notice",
        "description": "Delete the notice from the database",
        "operationId": "removeNotice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of notice that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Delete the notice with the specified ID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Notice not found"
          }
        }
      },
      "get": {
        "summary": "Find the notice by ID",
        "tags": [
          "Notices"
        ],
        "description": "Find the notices by it's unique identifier",
        "operationId": "getNoticeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Find the notices by id",
              "example": "6494c145ddb3a57412f3d4b4"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNoticeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/notices/notice/{id}/active": {
      "patch": {
        "summary": "activate and deactivate notice",
        "tags": [
          "Notices"
        ],
        "description": "Update 'active' status in the database and move the notice to the appropriate collection",
        "operationId": "toggleActive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "example": "6490564f8f85c705511c5de2",
            "schema": {
              "type": "string",
              "description": "Backend-generated unique identifier"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "type": "boolean",
                    "description": "Status to be changed",
                    "example": false
                  } 
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status is changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNoticeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Notice not found"
          }
        }
      }
    },
    "/main": {
      "get": {
        "summary": "Get all categories",
        "tags": [
          "Categories"
        ],
        "description": "Find all existing categories",
        "operationId": "getAllCategories",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOfCategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Categories not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": [
          "email",
          "password",
          "name",
          "lastname"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "user email",
            "example": "user@gmail.com",
            "pattern": "/@([\\w-]+\\.)+[\\w-]{2,6}$/"
          },
          "password": {
            "type": "string",
            "description": "user password",
            "example": "Ghj__567mlk"
          },
          "name": {
            "type": "string",
            "description": "user name",
            "example": "Olga"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "user email",
            "example": "user@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "user name",
            "example": "Olga"
          },
          "lastname": {
            "type": "string",
            "description": "user lastname",
            "example": "Ivanenko"
          }
        }
      },
      "ResendVerifyEmailRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "user email",
            "example": "user@gmail.com",
            "pattern": "/@([\\w-]+\\.)+[\\w-]{2,6}$/"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "user email",
            "example": "user@gmail.com",
            "pattern": "/@([\\w-]+\\.)+[\\w-]{2,6}$/"
          },
          "password": {
            "type": "string",
            "description": "user password",
            "example": "Ghj__567mlk"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "user name",
                "example": "Olena"
              },
              "email": {
                "type": "string",
                "description": "user email",
                "example": "estasjuk@gmail.com"
              },
              "name": {
                "type": "string",
                "description": "user name",
                "example": "Olena"
              }
            }
          },
          "accessToken": {
            "type": "string",
            "description": "Backend-generated unique identifier",
            "example": "GHR45GciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.jjF34QI6IjY0NWRlMTIzNTVlNWM4MDM0ODQ0Y2Q0MCIsImlhdCI6MTY4Mzg3NzgyNywiZXhwIjoxNjgzOTQyNjI3fQ.Cl7kfx9Tm-125ffgMKQGOzR9WhTH_dYET1B75hFjZyk"
          },
          "refreshToken": {
            "type": "string",
            "description": "Backend-generated unique identifier",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0NjBlZDFlMjAzOWY0YmY0ZmNiMGYzNSIsImlhdCI6MTY4NDYxNjAzMiwiZXhwIjoxNjg3MjA4MDMyfQ.TNCLb9OScTwrcLVg2txPk_K4_pESZ93SCjuUpDog4Kw"
          }
        }
      },
      "RefreshRequest": {
        "type": "object",
        "required": [
          "refreshToken"
        ],
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Backend-generated unique refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0ZDU0N2Q2NmM3MjA5YjNjZmI1ZDc0YiIsImlhdCI6MTY5MTg0NTg5OCwiZXhwIjoxNjkyNDUwNjk4fQ.aQbcjhBVxuHFWVlWFjizOI1Pp77Qh7VHD0CD9U9ujgU"
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Backend-generated unique access token",
            "example": "GHR45GciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.jjF34QI6IjY0NWRlMTIzNTVlNWM4MDM0ODQ0Y2Q0MCIsImlhdCI6MTY4Mzg3NzgyNywiZXhwIjoxNjgzOTQyNjI3fQ.Cl7kfx9Tm-125ffgMKQGOzR9WhTH_dYET1B75hFjZyk"
          },
          "refreshToken": {
            "type": "string",
            "description": "Backend-generated unique refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0NjBlZDFlMjAzOWY0YmY0ZmNiMGYzNSIsImlhdCI6MTY4NDYxNjAzMiwiZXhwIjoxNjg3MjA4MDMyfQ.TNCLb9OScTwrcLVg2txPk_K4_pESZ93SCjuUpDog4Kw"
          }
        }
      },
      "GetCurrentUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The username of the current user",
            "example": "Olena"
          },
          "email": {
            "type": "string",
            "description": "The email of the current user",
            "example": "Olena@gmail.com"
          }
        }
      },
      "ListOfNoticesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "isGoodType": {
                  "type": "boolean",
                  "example": true
                },
                "totalResults": {
                  "type": "integer",
                  "example": 8
                },
                "totalPages": {
                  "type": "integer",
                  "example": 2
                },
                "page": {
                  "type": "integer",
                  "example": 1
                },
                "limit": {
                  "type": "integer",
                  "example": 6
                },
                "maxPriceInCategory": {
                  "type": "integer",
                  "example": 84450
                },
                "result": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddNoticeResponse"
                  }
                }
              }
            },
            "description": "List of notices found by request"
          }
        }
      },
      "AddNoticeRequest": {
        "type": "object",
        "required": [
          "title",
          "description",
          "price",
          "location",
          "category"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "The chair for sale"
          },
          "description": {
            "type": "string",
            "example": "Very good chair for your home"
          },
          "category": {
            "type": "string",
            "enum": [
              "auto",
              "business-and-services",
              "for-free",
              "children's-world",
              "home-and-garden",
              "help",
              "electricity",
              "spare-parts-for-transport",
              "fashion-and-style",
              "realty",
              "exchange",
              "repair",
              "work",
              "animals",
              "goods-to-win",
              "hobbies-recreation-sports"
            ],
            "example": "home-and-garden"
          },
          "location": {
            "type": "string",
            "example": "Kyiv"
          },
          "price": {
            "type": "integer",
            "example": 2500
          },
          "goodtype": {
            "type": "string",
            "enum": [
              "used",
              "new"
            ],
            "example": "new"
          },
          "photos": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UpdateNoticeRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "The chair for sale"
          },
          "description": {
            "type": "string",
            "example": "Very good chair for your home"
          },
          "category": {
            "type": "string",
            "enum": [
              "auto",
              "business-and-services",
              "for-free",
              "children's-world",
              "home-and-garden",
              "help",
              "electricity",
              "spare-parts-for-transport",
              "fashion-and-style",
              "realty",
              "exchange",
              "repair",
              "work",
              "animals",
              "goods-to-win",
              "hobbies-recreation-sports"
            ],
            "example": "home-and-garden"
          },
          "location": {
            "type": "string",
            "example": "Kyiv"
          },
          "price": {
            "type": "integer",
            "example": 2500
          },
          "comments": {
            "type": "string",
            "example": "Very good chair for you home"
          },
          "goodtype": {
            "type": "string",
            "enum": [
              "used",
              "new"
            ],
            "example": "new"
          },
          "contactName": {
            "type": "string",
            "exapmle": "Olga"
          },
          "contactNumber": {
            "type": "string",
            "exapmle": "380961111111"
          },
          "photos": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "AddNoticeResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Backend-generated unique identifier",
            "example": "GGHJlhkj668__hjkhjkhh$%"
          },
          "category": {
            "type": "string",
            "description": "notice's category",
            "enum": [
              "auto",
              "business-and-services",
              "for-free",
              "children's-world",
              "home-and-garden",
              "help",
              "electricity",
              "spare-parts-for-transport",
              "fashion-and-style",
              "realty",
              "exchange",
              "repair",
              "work",
              "animals",
              "goods-to-win",
              "hobbies-recreation-sports"
            ]
          },
          "title": {
            "type": "string",
            "description": "the title of user notice",
            "example": "The chair for sale"
          },
          "description": {
            "type": "string",
            "example": "Very good chair for your home"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "notice image url",
              "example": "https://yarmarok-bucket.s3.amazonaws.com/BSqREaubo3hWhDvb6lNZ3_2.jpg"
            }
          },
          "location": {
            "type": "string",
            "example": "Kyiv"
          },
          "goodtype": {
            "type": "string",
            "enum": ["new", "used"]
          },
          "price": {
            "type": "integer",
            "example": 2500
          },
          "active": {
            "type": "boolean",
            "example": false
          },
          "createdAt": {
            "type": "string",
            "description": "the creation time of notice (backend-generated)",
            "example": "2023-05-15T10:51:30.531Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "the update time of notice (backend-generated)",
            "example": "2023-05-15T10:51:30.531Z"
          }
        }
      },
      "ListOfCategoriesResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Backend-generated unique identifier",
                  "example": "GGHJlhkj668__hjkhjkhh$%"
                },
                "name": {
                  "type": "string",
                  "enum": [
                    "Авто",
                    "Бізнес та послуги",
                    "Віддам безкоштовно",
                    "Дитячий світ",
                    "Дім і сад",
                    "Допомога",
                    "Електроніка",
                    "Запчастини для транспорту",
                    "Мода і стиль",
                    "Нерухомість",
                    "Обмін",
                    "Ремонтні послуги",
                    "Робота",
                    "Тварини",
                    "Товари для перемоги",
                    "Хобі, відпочинок та спорт"
                  ]
                },
                "isGoodType": {
                  "type": "boolean",
                  "description": "Show does category have goodtype 'new' or 'used'",
                  "example": "true"
                },
                "photo": {
                  "type": "string",
                  "description": "link on category photo",
                  "example": "https://yarmarok-bucket.s3.eu-central-1.amazonaws.com/categories-photo/children's-world.png"
                }
              }
            },
            "description": "List of notices found by request"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
